12000;0.002     ;0.001
14000;0.002     ;0.002
16000;0.003     ;0.003
18000;0.002     ;0.002
20000;0.002     ;0.003
22000;0.002     ;0.004
24000;0.004     ;0.004
26000;0.003     ;0.004
28000;0.005     ;0.004
30000;0.005     ;0.005
32000;0.005     ;0.005
34000;0.005     ;0.006
36000;0.005     ;0.006
38000;0.006     ;0.007
40000;0.005     ;0.006
42000;0.006     ;0.007
44000;0.007     ;0.008
46000;0.006     ;0.007
48000;0.006     ;0.007
50000;0.007     ;0.008
52000;0.007     ;0.009
54000;0.007     ;0.011
56000;0.009     ;0.009
58000;0.009     ;0.009
60000;0.008     ;0.01
62000;0.008     ;0.01
64000;0.011     ;0.012
66000;0.009     ;0.012
68000;0.009     ;0.012
70000;0.011     ;0.013
72000;0.01      ;0.013
74000;0.014     ;0.015
76000;0.011     ;0.015
78000;0.015     ;0.015
80000;0.012     ;0.015
82000;0.013     ;0.017
84000;0.015     ;0.016
86000;0.012     ;0.014
88000;0.012     ;0.015
90000;0.012     ;0.017
92000;0.013     ;0.016
94000;0.014     ;0.018
96000;0.013     ;0.016
98000;0.013     ;0.018
100000;0.014    ;0.017

Выше представлены результаты работы qsort из С и sort из С++. 1 столбец -> размер массива, 2 столбец -> сортировка С, 3 стобец -> сортировка С++. 
По результатам, представленным в results.png можно сделать вывод, что сортировка qsort из С работает быстрее, особенно это видно на больших массивах данных.