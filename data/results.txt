N	t1	t2	
2400	0.001	0.005	1
4800	0.003	0.01	2
7200	0.005	0.019	3
9600	0.005	0.022	4
12000	0.009	0.031	5
14400	0.015	0.04	6
16800	0.009	0.041	7
19200	0.012	0.047	8
21600	0.014	0.057	9
24000	0.014	0.063	10
26400	0.017	0.077	11
28800	0.017	0.078	12
31200	0.021	0.088	13
33600	0.022	0.113	14
36000	0.029	0.097	15
38400	0.024	0.114	16
40800	0.026	0.117	17
43200	0.029	0.126	18
45600	0.032	0.128	19
48000	0.035	0.141	20
50400	0.033	0.144	21
52800	0.039	0.156	22
55200	0.042	0.16	23
57600	0.04	0.171	24
60000	0.043	0.205	25
62400	0.053	0.203	26
64800	0.051	0.189	27
67200	0.052	0.21	28
69600	0.046	0.208	29
72000	0.052	0.209	30
74400	0.057	0.208	31
76800	0.066	0.291	32
79200	0.062	0.234	33
81600	0.06	0.267	34
84000	0.057	0.26	35
86400	0.065	0.256	36
88800	0.063	0.287	37
91200	0.071	0.289	38
93600	0.066	0.311	39
96000	0.094	0.315	40
98400	0.067	0.286	41
100800	0.088	0.287	42
103200	0.075	0.323	43
105600	0.078	0.338	44
108000	0.082	0.309	45
110400	0.109	0.396	46
112800	0.093	0.365	47
115200	0.087	0.338	48
117600	0.093	0.349	49
120000	0.093	0.393	50

С увеличением размера массива, увеличивается и время выполнения.
C quick-sort выполняется быстрее, чем C++ quick-sort